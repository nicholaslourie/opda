[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"


[project]
name = "opda"
version = "0.7.0"
authors = [{ name = "Nicholas Lourie", email = "dev@nicholaslourie.com" }]
description = "Design and analyze optimal deep learning models."
readme = "README.rst"
license = {text = "Apache-2.0"}
requires-python = ">= 3.9"
dependencies = [
  "numpy >= 1.24",
  "scipy >= 1.11",
]
keywords = [
  "opda",
  "optimal design analysis",
  "hyperparameter tuning",
  "machine learning", "ml",
  "deep learning", "dl",
  "artificial intelligence", "ai",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Private :: Do Not Upload",                        # build: local-only
]

[project.optional-dependencies]
# experiments
experiments = [                                      # build: local-only
  "autograd >= 1.6.0",                               # build: local-only
  "matplotlib >= 3.7.0",                             # build: local-only
]                                                    # build: local-only
nbs = [
  "opda[experiments]",                               # build: local-only
  "notebook == 7.0.6",
]
# development
lint = [
  "ruff == 0.1.13",
]
docs = [
  "furo == 2023.9.10",
  "matplotlib == 3.7.4",
  "numpydoc == 1.6.0",
  "sphinx == 7.1.2",
  "tomli; python_version<'3.11'",  # backwards compatibility (Python < 3.11)
]
test = [
  "opda[experiments]",                               # build: local-only
  "pytest == 7.4.4",
]
package = [
  "build == 1.2.1",
  "twine == 6.1.0",
]
ci = [
  "lxml == 5.3.0",
  "nox == 2023.4.22",
  "requests == 2.31.0",
  "tomli; python_version<'3.11'",  # backwards compatibility (Python < 3.11)
]

[project.urls]
Documentation = "https://nicholaslourie.github.io/opda"
Source = "https://github.com/nicholaslourie/opda"
Issues = "https://github.com/nicholaslourie/opda/issues"
Changelog = "https://nicholaslourie.github.io/opda/changelog.html"


[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]
include = [
  "experiments*",                                    # build: local-only
  "opda*",
]
namespaces = false

[tool.setuptools.package-data]
experiments = ["default.mplstyle"]                   # build: local-only
opda = ["_approximations.json"]
# -- build: local-only -------------------------------------------------
# NOTE: The rest of this file is omitted for distribution packages. See
# the "package" session in noxfile.py for how "local-only" is processed.


[tool.pytest.ini_options]
minversion = "6.0"
log_level = "INFO"
addopts = "--strict-markers --strict-config"
markers = ["level"]
testpaths = ["tests"]


[tool.ruff]
extend-include = ["*.ipynb"]
line-length = 80
ignore-init-module-imports = true
src = ["src", "tests"]

[tool.ruff.format]
exclude = ["*.ipynb"]

[tool.ruff.lint]
select = [
  "A",        # flake8-builtins
  "ARG",      # flake8-unused-arguments
  "ASYNC",    # flake8-async
  "B",        # flake8-bugbear
  "BLE",      # flake8-blind-except
  "C4",       # flake8-comprehensions
  "COM",      # flake8-commas
  "D",        # pydocstyle
  "DTZ",      # flake8-datetimez
  "E", "W",   # pycodestyle (errors, warnings)
  "EXE",      # flake8-executable
  "F",        # Pyflakes
  "FIX",      # flake8-fixme
  "FLY",      # flynt
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "INP",      # flake8-no-pep420
  "ISC",      # flake8-implicit-str-concat
  "N",        # pep8-naming
  "NPY",      # NumPy-specific rules
  "PERF",     # Perflint
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PYI",      # flake8-pyi
  "Q",        # flake8-quotes
  "RET",      # flake8-return
  "RSE",      # flake8-raise
  "RUF",      # Ruff-specific rules
  "S",        # flake8-bandit
  "SIM",      # flake8-simplify
  "SLF",      # flake8-self
  "SLOT",     # flake8-slots
  "T10",      # flake8-debugger
  "T20",      # flake8-print
  "TID",      # flake8-tidy-imports
  "TRY",      # tryceratops
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "G004",     # Logging statement uses f-string
  "SIM300",   # Yoda conditions are discouraged
  "RET504",   # Unnecessary assignment to {name} before `return` statement
  "TRY003",   # Avoid specifying long messages outside the exception class
  "PLR09",    # (rule range) too many statements, branches, etc.
  "PLR1714",  # Consider merging multiple comparisons. Use a `set`...
  "PLR2004",  # Magic value used in comparison
  "PLR5501",  # Use `elif` instead of `else` then `if`, to reduce indentation
  "D105",     # Missing docstring in magic method
  "SIM118",   # Use key {operator} dict instead of key {operator} dict.keys()
  "S320",     # Using lxml to parse untrusted data is known to be vulnerable...
              # (S320 is wrong, see https://github.com/PyCQA/bandit/issues/767).
  "PERF401",  # Use a list comprehension to create a transformed list
  "B023",     # Function definition does not bind loop variable {name}
  "PLW2901",  # Outer {outer_kind} variable {name} overwritten by inner ...
  "SIM102",   # Use a single `if` statement instead of nested `if` statements
]
extend-select = [
  "D402",     # First line should not be the function's signature
  "D417",     # Missing argument description in the docstring ...
]

[tool.ruff.lint.per-file-ignores]
"docs/*" = [
  "INP001",   # File {filename} is part of an implicit namespace package.
]
"**/*.ipynb" = [
  "E501",     # Line too long
  "T201",     # `print` found
  "T203",     # `pprint` found
  "D10",      # (rule range) require doc strings
]
"**/conftest.py" = [
  "D10",      # (rule range) require doc strings
]
"**/test_*.py" = [
  "D102",     # Missing docstring in public method
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
force-wrap-aliases = true
known-first-party = ["experiments", "opda"]
forced-separate = ["tests"]
